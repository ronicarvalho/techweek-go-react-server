// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const answerMessage = `-- name: AnswerMessage :one
UPDATE messages
SET
    answered = true
WHERE
    id = $1
RETURNING answered
`

func (q *Queries) AnswerMessage(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, answerMessage, id)
	var answered bool
	err := row.Scan(&answered)
	return answered, err
}

const createReaction = `-- name: CreateReaction :one
UPDATE messages
SET
    reaction_count = reaction_count +1
WHERE
    id = $1
RETURNING reaction_count
`

func (q *Queries) CreateReaction(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, createReaction, id)
	var reaction_count int64
	err := row.Scan(&reaction_count)
	return reaction_count, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (theme)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateRoom(ctx context.Context, theme string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createRoom, theme)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createRoomMessage = `-- name: CreateRoomMessage :one
INSERT INTO messages (room_id, message)
VALUES ($1, $2)
RETURNING id
`

type CreateRoomMessageParams struct {
	RoomID  uuid.UUID
	Message string
}

func (q *Queries) CreateRoomMessage(ctx context.Context, arg CreateRoomMessageParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createRoomMessage, arg.RoomID, arg.Message)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRoom = `-- name: GetRoom :one
SELECT
    id, theme
FROM
    rooms
WHERE
    id = $1
`

func (q *Queries) GetRoom(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}

const getRoomMessage = `-- name: GetRoomMessage :one
SELECT
    id, room_id, message, reaction_count, answered
FROM
    messages
WHERE 
    id = $1
`

func (q *Queries) GetRoomMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getRoomMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
	)
	return i, err
}

const getRoomMessages = `-- name: GetRoomMessages :many
SELECT
    id, room_id, message, reaction_count, answered
FROM
    messages
WHERE 
    room_id = $1
`

func (q *Queries) GetRoomMessages(ctx context.Context, roomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getRoomMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.ReactionCount,
			&i.Answered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRooms = `-- name: GetRooms :many
SELECT
    id, theme
FROM
    rooms
`

func (q *Queries) GetRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Theme); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeReaction = `-- name: RemoveReaction :one
UPDATE messages
SET
    reaction_count = reaction_count -1
WHERE
    id = $1
RETURNING reaction_count
`

func (q *Queries) RemoveReaction(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, removeReaction, id)
	var reaction_count int64
	err := row.Scan(&reaction_count)
	return reaction_count, err
}
